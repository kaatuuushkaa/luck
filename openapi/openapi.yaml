openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{id}:
    patch:
      summary: Update a task by ID
      tags:
        - tasks
      operationId: PatchTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Task data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a task by ID
      tags:
        - tasks
      operationId: DeleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '500':
          description: Failed to delete task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    patch:
      summary: Update a user by ID
      tags:
        - users
      operationId: PatchUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user by ID
      tags:
        - users
      operationId: DeleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '500':
          description: Failed to delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
        password:
          type: string

    UserUpdate:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint # так как в БД айди это только положительные числа.
        task:
          type: string
        is_done:
          type: boolean

    TaskUpdate:
      type: object
      required:
        - task
      properties:
        task:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string